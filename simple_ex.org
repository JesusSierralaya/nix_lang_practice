#+title: Nix Language
#+PROPERTY: header-args :results output

:toc:

* Let - in and attributes
** Hello world!
#+begin_src nix :exports both
"Hello world!"
#+end_src

#+RESULTS:
: "Hello world!"

** Bind values to names let / in
We bind the value ~10~ to the name ~a~.
#+begin_src nix :exports both
let
  a = 10;
in
  a
#+end_src

#+RESULTS:
: 10

** Multiple bindings
#+begin_src nix :exports both
let
  a = 2;
  b = 3;
in
  a * b
#+end_src

#+RESULTS:
: 6

** Nested
~let~ blocks can be nested.
#+begin_src nix :exports both
let
  base = 10;
in
  let
    multiplier = 2;
  in
    base * multiplier
#+end_src

#+RESULTS:
: 20

** Attribute assigned to a variable
#+begin_src nix :exports both
let
  mySet = { y = 3; };
in
mySet.y
#+end_src

#+RESULTS:
: 3

** Using 'let' with attribute sets
~let~ is often used with attribute sets to define multiple related values
#+begin_src nix :exports both
let
  config = {
    name = "example";
    value = 42;
  };
in
  "Name: ${config.name}, Value: ${toString config.value}"
#+end_src

#+RESULTS:
: "Name: example, Value: 42"

** Attribute selection
#+begin_src nix :exports both
{x = 1; y = 2;}.x
#+end_src

#+RESULTS:
: 1

** Attribute selection with a default value
#+begin_src nix :export both
{x = 1; y = 2;}.z or 3
#+end_src

#+RESULTS:
: 3

** Merge two sets
#+begin_src nix :exports both
{x = 1; y = 2;} // {z = 3;}
#+end_src

#+RESULTS:
: { x = 1; y = 2; z = 3; }

* Control structures
** Conditional expression
#+begin_src nix :exports both
if 1 + 1 == 2 then "yes!" else "no!"
#+end_src

#+RESULTS:
: "yes!"

** Assertion check
#+begin_src nix :exports both
assert 1 + 1 == 2; "yes!"
#+end_src

#+RESULTS:
: "yes!"
