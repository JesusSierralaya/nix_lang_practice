#+title: Nix Language
#+PROPERTY: header-args :results output
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#let---in-and-attributes][Let - in and attributes]]
  - [[#hello-world][Hello world!]]
  - [[#bind-values-to-names-let--in][Bind values to names let / in]]
  - [[#multiple-bindings][Multiple bindings]]
  - [[#nested][Nested]]
  - [[#attribute-assigned-to-a-variable][Attribute assigned to a variable]]
  - [[#using-let-with-attribute-sets][Using 'let' with attribute sets]]
  - [[#attribute-selection][Attribute selection]]
  - [[#attribute-selection-with-a-default-value][Attribute selection with a default value]]
  - [[#merge-two-sets][Merge two sets]]
- [[#control-structures][Control structures]]
  - [[#conditional-expression][Conditional expression]]
  - [[#assertion-check][Assertion check]]
  - [[#variable-definition][Variable definition]]
  - [[#add-all-attributes-from-the-given-set-to-the-scope][Add all attributes from the given set to the scope]]
- [[#functions-lambdas][Functions (lambdas)]]
  - [[#simple-function][Simple function]]
  - [[#using-the-function][Using the function]]
  - [[#curried-function][Curried function]]
  - [[#function-call][Function call]]
  - [[#bound-to-a-variable-and-called-by-name][Bound to a variable and called by name]]
  - [[#expected-attributes][Expected attributes]]

* Let - in and attributes
** Hello world!
#+begin_src nix :exports both
"Hello world!"
#+end_src

#+RESULTS:
: "Hello world!"

** Bind values to names let / in
We bind the value ~10~ to the name ~a~.
#+begin_src nix :exports both
let
  a = 10;
in
  a
#+end_src

#+RESULTS:
: 10

** Multiple bindings
#+begin_src nix :exports both
let
  a = 2;
  b = 3;
in
  a * b
#+end_src

#+RESULTS:
: 6

** Nested
~let~ blocks can be nested.
#+begin_src nix :exports both
let
  base = 10;
in
  let
    multiplier = 2;
  in
    base * multiplier
#+end_src

#+RESULTS:
: 20

** Attribute assigned to a variable
#+begin_src nix :exports both
let
  mySet = { y = 3; };
in
mySet.y
#+end_src

#+RESULTS:
: 3

** Using 'let' with attribute sets
~let~ is often used with attribute sets to define multiple related values
#+begin_src nix :exports both
let
  config = {
    name = "example";
    value = 42;
  };
in
  "Name: ${config.name}, Value: ${toString config.value}"
#+end_src

#+RESULTS:
: "Name: example, Value: 42"

** Attribute selection
#+begin_src nix :exports both
{x = 1; y = 2;}.x
#+end_src

#+RESULTS:
: 1

** Attribute selection with a default value
#+begin_src nix :export both
{x = 1; y = 2;}.z or 3
#+end_src

#+RESULTS:
: 3

** Merge two sets
#+begin_src nix :exports both
{x = 1; y = 2;} // {z = 3;}
#+end_src

#+RESULTS:
: { x = 1; y = 2; z = 3; }

* Control structures
** Conditional expression
#+begin_src nix :exports both
if 1 + 1 == 2 then "yes!" else "no!"
#+end_src

#+RESULTS:
: "yes!"

** Assertion check
#+begin_src nix :exports both
assert 1 + 1 == 2; "yes!"
#+end_src

#+RESULTS:
: "yes! "

** Variable definition
#+begin_src nix :exports both
let x = "foo"; y = "bar"; in x + y
#+end_src

#+RESULTS:
: "foobar"

** Add all attributes from the given set to the scope
#+begin_src nix :exports both
with builtins; head [2 3 4 5]
#+end_src

#+RESULTS:
: 2

*
* Functions (lambdas)
** Simple function
A function that expetcs an integer and returns it icreased by 1
#+begin_src nix :exports both
x: x + 1
#+end_src

#+RESULTS:
: <LAMBDA>

** Using the function
#+begin_src nix :exports both
let increment = x: x + 1; in increment 3
#+end_src

#+RESULTS:
: 4

** Curried function
Can be used like a function that takes two arguments
#+begin_src nix :exports both
x: y: x + y
#+end_src

#+RESULTS:
: <LAMBDA>
** Function call
#+begin_src nix :exports both
(x: x + 1) 100
#+end_src

#+RESULTS:
: 101
** Bound to a variable and called by name
#+begin_src nix :exports both
let inc = x: x + 1; in inc (inc (inc 100))
#+end_src

#+RESULTS:
: 103

** Expected attributes
*** Numbers
#+begin_src nix :exports both
let add = { x, y }: x + y; in add { x = 3; y = 5; }
#+end_src

#+RESULTS:
: 8

*** Optional with default value
#+begin_src nix :exports both
let add = { x, y ? "default" }: x + y; in add { x = "value "; }
#+end_src

#+RESULTS:
: "value default"

*** Ignore any other attributes
#+begin_src nix :exports both
let add = { x, y , ...}: x + y; in add { x = 1; y = 2; z = 5;}
#+end_src

#+RESULTS:
: 3
